---
description: Tailwind CSS Styling Guidelines
globs: **/*.tsx,**/*.ts,**/tailwind.config.*,**/*.css,**/postcss.config.*
alwaysApply: false
---
# Tailwind CSS Styling Guidelines

## Core Principles

- Use Tailwind CSS utility classes for consistent styling
- Follow mobile-first responsive design principles
- Implement design system with CSS variables and custom properties
- Use component-based styling patterns
- Optimize for performance with JIT compilation
- Maintain accessibility standards in all components
- Follow consistent spacing and color systems
- Use semantic color naming conventions

## Configuration

### Tailwind Config
```typescript
// ✅ Good - Tailwind configuration
import type { Config } from 'tailwindcss'

export default {
  darkMode: ['class', '[data-theme="dark"]'],
  content: [
    './src/**/*.{ts,tsx}',
    '../../packages/ui/src/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
      },
      fontFamily: {
        sans: ['var(--font-geist-sans)', 'system-ui', 'sans-serif'],
        mono: ['var(--font-geist-mono)', 'Menlo', 'monospace'],
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'bounce-gentle': 'bounceGentle 2s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [
    require('tailwindcss-animate'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms'),
  ],
} satisfies Config
```

### CSS Variables Setup
```css
/* ✅ Good - CSS variables for theming */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 9% 16%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    @apply w-2 h-2;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-transparent;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-border rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-muted-foreground/50;
  }
}
```

## Component Patterns

### Layout Components
```tsx
// ✅ Good - Layout component with Tailwind
interface ContainerProps {
  children: React.ReactNode
  className?: string
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
}

export function Container({ children, className, size = 'lg' }: ContainerProps) {
  const sizeClasses = {
    sm: 'max-w-2xl',
    md: 'max-w-4xl', 
    lg: 'max-w-6xl',
    xl: 'max-w-7xl',
    full: 'max-w-full',
  }

  return (
    <div className={cn('mx-auto px-4 sm:px-6 lg:px-8', sizeClasses[size], className)}>
      {children}
    </div>
  )
}

// Usage
<Container size="md" className="py-8">
  <h1 className="text-3xl font-bold text-foreground">Content</h1>
</Container>
```

### Component Variants with CVA
```tsx
// ✅ Good - Button variants with class-variance-authority
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@raypx/ui/lib/utils'

const buttonVariants = cva(
  // Base styles
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

export function Button({ className, variant, size, asChild = false, ...props }: ButtonProps) {
  const Comp = asChild ? Slot : 'button'
  return <Comp className={cn(buttonVariants({ variant, size, className }))} {...props} />
}
```

## Responsive Design

### Mobile-First Approach
```tsx
// ✅ Good - Mobile-first responsive design
export function ResponsiveGrid({ children }: { children: React.ReactNode }) {
  return (
    <div className="
      grid grid-cols-1           // Mobile: 1 column
      sm:grid-cols-2             // Small screens: 2 columns
      md:grid-cols-3             // Medium screens: 3 columns
      lg:grid-cols-4             // Large screens: 4 columns
      gap-4 sm:gap-6 lg:gap-8    // Progressive gap sizes
    ">
      {children}
    </div>
  )
}

// ✅ Good - Responsive typography
export function ResponsiveText() {
  return (
    <div className="space-y-4">
      <h1 className="
        text-2xl sm:text-3xl lg:text-4xl xl:text-5xl
        font-bold leading-tight
        text-foreground
      ">
        Responsive Heading
      </h1>
      <p className="
        text-sm sm:text-base lg:text-lg
        text-muted-foreground
        max-w-prose
      ">
        Responsive paragraph text that scales appropriately.
      </p>
    </div>
  )
}
```

### Breakpoint Usage
```tsx
// ✅ Good - Consistent breakpoint usage
const breakpoints = {
  sm: '640px',   // @media (min-width: 640px)
  md: '768px',   // @media (min-width: 768px)  
  lg: '1024px',  // @media (min-width: 1024px)
  xl: '1280px',  // @media (min-width: 1280px)
  '2xl': '1536px' // @media (min-width: 1536px)
}

// Usage patterns
<div className="
  w-full           // Default: full width
  sm:w-auto        // Small and up: auto width
  md:w-1/2         // Medium and up: half width
  lg:w-1/3         // Large and up: one-third width
" />
```

## Dark Mode Implementation

### Theme Switching
```tsx
// ✅ Good - Dark mode with next-themes
'use client'

import { useTheme } from 'next-themes'
import { Button } from '@raypx/ui/components/button'
import { Moon, Sun } from 'lucide-react'

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="relative h-9 w-9"
    >
      <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
```

### Dark Mode Color Patterns
```tsx
// ✅ Good - Dark mode friendly components
export function Card({ children, className }: CardProps) {
  return (
    <div className={cn(
      // Light mode colors
      'bg-card text-card-foreground',
      // Border and shadows that work in both modes
      'border border-border',
      'shadow-sm hover:shadow-md',
      // Smooth transitions
      'transition-all duration-200',
      className
    )}>
      {children}
    </div>
  )
}
```

## Animation and Transitions

### Micro-Interactions
```tsx
// ✅ Good - Subtle animations
export function InteractiveButton({ children, ...props }: ButtonProps) {
  return (
    <button
      className="
        px-4 py-2 rounded-md
        bg-primary text-primary-foreground
        transform transition-all duration-200 ease-in-out
        hover:scale-105 hover:shadow-lg
        active:scale-95
        focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none
      "
      {...props}
    >
      {children}
    </button>
  )
}

// ✅ Good - Loading states
export function LoadingButton({ isLoading, children, ...props }: LoadingButtonProps) {
  return (
    <Button disabled={isLoading} {...props}>
      {isLoading && (
        <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent" />
      )}
      {children}
    </Button>
  )
}
```

### Page Transitions
```tsx
// ✅ Good - Page transition animations
export function PageTransition({ children }: { children: React.ReactNode }) {
  return (
    <div className="
      animate-in fade-in-0 slide-in-from-bottom-4
      duration-300 ease-out
    ">
      {children}
    </div>
  )
}
```

## Form Styling

### Form Components
```tsx
// ✅ Good - Consistent form styling
export function FormField({ label, error, children, required }: FormFieldProps) {
  return (
    <div className="space-y-2">
      <label className="
        text-sm font-medium leading-none
        text-foreground
        peer-disabled:cursor-not-allowed peer-disabled:opacity-70
      ">
        {label}
        {required && <span className="text-destructive ml-1">*</span>}
      </label>
      
      <div className="relative">
        {children}
      </div>
      
      {error && (
        <p className="text-sm text-destructive font-medium">
          {error}
        </p>
      )}
    </div>
  )
}

// ✅ Good - Input styling
export function Input({ className, error, ...props }: InputProps) {
  return (
    <input
      className={cn(
        // Base styles
        'flex h-10 w-full rounded-md border border-input',
        'bg-background px-3 py-2',
        'text-sm text-foreground placeholder:text-muted-foreground',
        'ring-offset-background',
        // Focus states
        'focus-visible:outline-none focus-visible:ring-2',
        'focus-visible:ring-ring focus-visible:ring-offset-2',
        // Disabled state
        'disabled:cursor-not-allowed disabled:opacity-50',
        // Error state
        error && 'border-destructive focus-visible:ring-destructive',
        className
      )}
      {...props}
    />
  )
}
```

## Performance Optimization

### JIT and PurgeCSS
```typescript
// ✅ Good - Optimized content configuration
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx}',
    './src/components/**/*.{js,ts,jsx,tsx}',
    './src/app/**/*.{js,ts,jsx,tsx}',
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
  // Only include used utilities
  safelist: [
    // Include dynamic classes that might not be detected
    'text-red-500',
    'bg-green-500',
    // Or use patterns
    {
      pattern: /bg-(red|green|blue)-(100|200|300|400|500|600|700|800|900)/,
    },
  ],
}
```

### Custom Utilities
```css
/* ✅ Good - Custom utility classes */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .text-pretty {
    text-wrap: pretty;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .glass {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
}
```

## Accessibility

### Focus Management
```tsx
// ✅ Good - Accessible focus styles
export function AccessibleButton({ children, ...props }: ButtonProps) {
  return (
    <button
      className="
        px-4 py-2 rounded-md
        bg-primary text-primary-foreground
        
        /* Focus styles for keyboard navigation */
        focus:outline-none
        focus-visible:ring-2 focus-visible:ring-ring
        focus-visible:ring-offset-2 focus-visible:ring-offset-background
        
        /* Ensure sufficient contrast */
        contrast-more:border-2 contrast-more:border-current
        
        /* High contrast mode support */
        forced-colors:border-[ButtonBorder]
        forced-colors:text-[ButtonText]
      "
      {...props}
    >
      {children}
    </button>
  )
}
```

### Screen Reader Support
```tsx
// ✅ Good - Screen reader friendly components
export function VisuallyHidden({ children }: { children: React.ReactNode }) {
  return (
    <span className="
      sr-only
      absolute w-px h-px p-0 -m-px
      overflow-hidden whitespace-nowrap
      border-0
    ">
      {children}
    </span>
  )
}
```

## Best Practices

### Class Organization
```tsx
// ✅ Good - Organized class names
export function WellOrganizedComponent() {
  return (
    <div className={cn(
      // Layout
      'flex flex-col items-center justify-center',
      'w-full max-w-md mx-auto',
      'p-6 space-y-4',
      
      // Appearance  
      'bg-card text-card-foreground',
      'border border-border rounded-lg',
      'shadow-sm',
      
      // Interactive states
      'hover:shadow-md',
      'focus-within:ring-2 focus-within:ring-ring',
      
      // Responsive
      'sm:max-w-lg sm:p-8',
      'lg:max-w-xl'
    )}>
      Content
    </div>
  )
}
```

### Utility Composition
```tsx
// ✅ Good - Reusable utility patterns
const focusRing = 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2'
const transition = 'transition-colors duration-200'

export function ComposedComponent() {
  return (
    <button className={cn(
      'px-4 py-2 rounded-md',
      'bg-primary text-primary-foreground',
      transition,
      focusRing,
      'hover:bg-primary/90'
    )}>
      Click me
    </button>
  )
}
```

Remember: Use semantic color tokens, follow mobile-first responsive design, implement proper focus management, and optimize for performance with JIT compilation.